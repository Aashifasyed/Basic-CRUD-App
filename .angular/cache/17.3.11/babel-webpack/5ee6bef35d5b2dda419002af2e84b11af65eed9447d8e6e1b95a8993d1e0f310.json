{"ast":null,"code":"import { User } from '../model/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = () => [\"/login\"];\nexport class RegistrationComponent {\n  constructor(_service, _router) {\n    this._service = _service;\n    this._router = _router;\n    this.user = new User();\n    this.msg = '';\n  }\n  ngOnInit() {}\n  registerUser() {\n    this._service.registerUserFromRemote(this.user).subscribe(data => {\n      console.log(\"Response Received\");\n      this._router.navigate(['/login']);\n      // this.msg=\"Registration Successful\";\n    }, error => {\n      console.log(\"exception occured\");\n      this.msg = error.error;\n    });\n  }\n  static {\n    this.ɵfac = function RegistrationComponent_Factory(t) {\n      return new (t || RegistrationComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegistrationComponent,\n      selectors: [[\"app-registration\"]],\n      decls: 37,\n      vars: 18,\n      consts: [[\"Registerform\", \"ngForm\"], [\"username\", \"ngModel\"], [\"password\", \"ngModel\"], [\"cpassword\", \"ngModel\"], [1, \"col-md-6\", \"offset-md-3\"], [1, \"text-center\", \"my-5\"], [3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"text\", \"placeholder\", \"Enter User Name\", \"name\", \"username\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"text-danger\"], [\"for\", \"pwd\"], [\"type\", \"password\", \"placeholder\", \"Enter password\", \"name\", \"password\", \"required\", \"\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"password\", \"placeholder\", \"Enter conform password\", \"name\", \"cpassword\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\"], [\"type\", \"text\", \"id\", \"role\", \"placeholder\", \"Enter ADMIN OR NORMAL\", \"name\", \"role\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"text-center\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", 3, \"disabled\"], [1, \"btn\", \"btn-success\", \"float-right\", \"btextual\", 3, \"routerLink\"]],\n      template: function RegistrationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 4);\n          i0.ɵɵelement(1, \"br\");\n          i0.ɵɵelementStart(2, \"h1\", 5)(3, \"u\");\n          i0.ɵɵtext(4, \"User Registration\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"form\", 6, 0);\n          i0.ɵɵlistener(\"ngSubmit\", function RegistrationComponent_Template_form_ngSubmit_5_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.registerUser());\n          });\n          i0.ɵɵelementStart(7, \"div\", 7)(8, \"label\", 8);\n          i0.ɵɵtext(9, \"User Name :\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"input\", 9, 1);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function RegistrationComponent_Template_input_ngModelChange_10_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            i0.ɵɵtwoWayBindingSet(ctx.user.userName, $event) || (ctx.user.userName = $event);\n            return i0.ɵɵresetView($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"small\", 10);\n          i0.ɵɵtext(13, \"User name is required field\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(14, \"div\", 7)(15, \"label\", 11);\n          i0.ɵɵtext(16, \"Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"input\", 12, 2);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function RegistrationComponent_Template_input_ngModelChange_17_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            i0.ɵɵtwoWayBindingSet(ctx.user.password, $event) || (ctx.user.password = $event);\n            return i0.ɵɵresetView($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"small\", 10);\n          i0.ɵɵtext(20, \"Password is required field\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(21, \"div\", 7)(22, \"label\", 11);\n          i0.ɵɵtext(23, \"Conform Password:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(24, \"input\", 13, 3);\n          i0.ɵɵlistener(\"ngModel\", function RegistrationComponent_Template_input_ngModel_24_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.user.password);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"small\", 10);\n          i0.ɵɵtext(27, \"Conform Password is Password field must be same\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(28, \"div\", 7)(29, \"label\");\n          i0.ɵɵtext(30, \"Role\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(31, \"input\", 14);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function RegistrationComponent_Template_input_ngModelChange_31_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            i0.ɵɵtwoWayBindingSet(ctx.user.role, $event) || (ctx.user.role = $event);\n            return i0.ɵɵresetView($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(32, \"div\", 15)(33, \"button\", 16);\n          i0.ɵɵtext(34, \"Register\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"button\", 17);\n          i0.ɵɵtext(36, \"Existing user ? Login here\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          const Registerform_r2 = i0.ɵɵreference(6);\n          const username_r3 = i0.ɵɵreference(11);\n          const password_r4 = i0.ɵɵreference(18);\n          const cpassword_r5 = i0.ɵɵreference(25);\n          i0.ɵɵadvance(10);\n          i0.ɵɵclassProp(\"is-invalid\", username_r3.invalid && username_r3.touched);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.userName);\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"d-none\", username_r3.valid || username_r3.untouched);\n          i0.ɵɵadvance(5);\n          i0.ɵɵclassProp(\"is-invalid\", password_r4.invalid && password_r4.touched);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.password);\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"d-none\", password_r4.valid || password_r4.untouched);\n          i0.ɵɵadvance(5);\n          i0.ɵɵclassProp(\"is-invalid\", cpassword_r5.invalid && cpassword_r5.touched);\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"d-none\", cpassword_r5.value == password_r4.value || cpassword_r5.untouched);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.user.role);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", Registerform_r2.form.invalid);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(17, _c0));\n        }\n      },\n      dependencies: [i2.RouterLink, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["User","RegistrationComponent","constructor","_service","_router","user","msg","ngOnInit","registerUser","registerUserFromRemote","subscribe","data","console","log","navigate","error","i0","ɵɵdirectiveInject","i1","UserService","i2","Router","selectors","decls","vars","consts","template","RegistrationComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵlistener","RegistrationComponent_Template_form_ngSubmit_5_listener","ɵɵrestoreView","_r1","ɵɵresetView","ɵɵtwoWayListener","RegistrationComponent_Template_input_ngModelChange_10_listener","$event","ɵɵtwoWayBindingSet","userName","RegistrationComponent_Template_input_ngModelChange_17_listener","password","RegistrationComponent_Template_input_ngModel_24_listener","RegistrationComponent_Template_input_ngModelChange_31_listener","role","ɵɵadvance","ɵɵclassProp","username_r3","invalid","touched","ɵɵtwoWayProperty","valid","untouched","password_r4","cpassword_r5","value","ɵɵproperty","Registerform_r2","form","ɵɵpureFunction0","_c0"],"sources":["C:\\Users\\Aashifa\\OneDrive\\Desktop\\doctor-frontend-main\\src\\app\\registration\\registration.component.ts","C:\\Users\\Aashifa\\OneDrive\\Desktop\\doctor-frontend-main\\src\\app\\registration\\registration.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User } from '../model/user';\nimport { NgForm } from '@angular/forms';\nimport { UserService } from '../service/user.service';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n\n  user = new User();\n  msg='';\n\n  constructor(private _service : UserService , private _router : Router) { }\n\n  ngOnInit(): void {\n  }\n\n\n  registerUser(){\n    this._service.registerUserFromRemote(this.user).subscribe(\n      data => {\n        console.log(\"Response Received\");\n        this._router.navigate(['/login']);\n        // this.msg=\"Registration Successful\";\n      }\n      ,\n      error => {\n        console.log(\"exception occured\");\n        this.msg=error.error;\n      }\n    )\n  }\n\n}\n","<div class=\"col-md-6 offset-md-3\">\n  <br>\n  <h1  class=\"text-center my-5\"> <u>User Registration</u></h1>\n  <form #Registerform=\"ngForm\" (ngSubmit) = \"registerUser()\" >\n    <!-- <small [class.text-danger]=\"msg.status==500\" >{{msg.message}}</small> -->\n    <div class=\"form-group\">\n      <label for=\"email\">User Name :</label>\n      <input type=\"text\" class=\"form-control\"  placeholder=\"Enter User Name\" name=\"username\" [(ngModel)]=\"user.userName\" required #username=\"ngModel\"\n      [class.is-invalid]=\"username.invalid && username.touched\"\n      >\n      <small class=\"text-danger\" [class.d-none]=\"username.valid ||username.untouched\">User name is required field</small>\n\n    </div>\n\n    <div class=\"form-group\">\n      <label for=\"pwd\">Password:</label>\n      <input type=\"password\" class=\"form-control\"  placeholder=\"Enter password\" name=\"password\" [(ngModel)]=\"user.password\" required #password=\"ngModel\"\n      [class.is-invalid]=\"password.invalid && password.touched\"\n      >\n      <small class=\"text-danger\" [class.d-none]=\"password.valid || password.untouched\">Password is required field</small>\n\n    </div>\n    <div class=\"form-group\">\n      <label for=\"pwd\">Conform Password:</label>\n      <input type=\"password\" class=\"form-control\"  placeholder=\"Enter conform password\" name=\"cpassword\" (ngModel)=\"user.password\" required #cpassword=\"ngModel\"\n      [class.is-invalid]=\"cpassword.invalid && cpassword.touched\"\n      >\n      <small class=\"text-danger\" [class.d-none]=\"(cpassword.value == password.value) || cpassword.untouched\">Conform Password is Password field must be same</small>\n\n    </div>\n\n    <div class=\"form-group\">\n      <label>Role</label>\n      <input type=\"text\" class=\"form-control\" id=\"role\" placeholder=\"Enter ADMIN OR NORMAL\"\n        [(ngModel)] = \"user.role\" name=\"role\">\n    </div>\n\n    <div class=\"text-center\">\n      <button [disabled]=\"Registerform.form.invalid\" class=\"btn btn-success \" type=\"submit\">Register</button>\n      <button class=\"btn btn-success float-right btextual\" [routerLink]=\"['/login']\" >Existing user ? Login here</button>\n      <!-- <small class=\"float-right btextual\" [routerLink]=\"['/login']\" >Existing user ? Login here</small> -->\n    </div>\n\n\n\n\n  </form>\n\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}